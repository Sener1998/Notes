******************************************************************************************
******************************************************************************************
1. 内核编程时既不能访问C库也不能访问标准的C头文件；
2. 内核编程时必须使用GNU C；
3. 内核编程时缺乏像用户空间那样的内存保护机制
4. 内核编程时难以执行浮点运算
5. 内核编程时每个进程只有一个很小的定长堆栈
6. 由于内核支持异步终端、抢占和SMP，因此必须时刻注意同步和并发
7. 要考虑可移植性的重要性
------------------------------------------------------------------------------------------
printk(KERN_ERR "this is an error!\n")
用printk来打印信息，可以使用syslog来查看，或者在/vat/log/里面看
------------------------------------------------------------------------------------------
1. 内联(inline)函数
通常把时间要求比较高却本身又比较短的函数定义成内联函数
定义内联函数的时候需要使用static作为关键字，并且用inline限定它：
static inline void wolf(unsigned long tail_size)
必须在使用前就定义好，否者编辑器就没法展开，事件中一般在头文件中定义内联函数
由于使用static所以编译时不会为内联函数单独建立一个函数体
如果一个内联函数只在某个源文件中使用，那么可以定义在该文件开始的地方
优先使用内联函数而不是复杂的宏

2. 内联汇编
通常使用asm()指令嵌入汇编代码
unsigned int low, high;
asm volatile("rdtsc" : "=a" (low), "=d" (high));
/* low和high分别包含了64位时间戳的低32位和高32位 */
linux内核混合使用C和汇编，在篇体系结构的底层和对时间要求严格的地方一般使用汇编

3. 分支声明
likely() unlikely 如果该条件很少出现就用后者，否则前者
if(unlikely(error){      // error绝大多数时间都会为0
}
if(likely(success){      // success绝大多数时间都会为1
}
unlikely通常使用更多，因为if往往判断特殊情况
------------------------------------------------------------------------------------------
用户程序进行非法内存访问，内核会发现错误，发送SIGSEGV信号，并结束整个进程
内核则没有东西照顾，会直接死掉
内核中的内存都不分页，没用掉一个字节，物理内存就减少一个字节
------------------------------------------------------------------------------------------
不要轻易在内核中使用浮点数
应用程序实现，Linux 中的浮点运算是利用数学库函数实现的，
库函数能够被应用程序链接后调用，不能被内核链接调用。
这些运算是在应用程序中运行的，然后再把结果反馈给系统。
Linux 内核如果一定要进行浮点运算，需要在建立内核时选上 math-emu,使用软件模拟计算浮点运算，
缺点：
1)用户在安装驱动时需要重建内核
2)使得这些应用程序在做浮点运算的时候也使用 math-emu，大大的降低了效率
------------------------------------------------------------------------------------------

******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
------------------------------------------------------------------------------------------
