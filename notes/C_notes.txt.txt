******************************************************************************************
******************************************************************************************
       _inline函数也称为内联函数或内嵌函数，_inline定义的类的内联函数，函数代码被放入符号调用表，使用时直接展开，不需要调用，即在编译期间将所调用的函数的代码直接嵌入到主调函数中，是一种以空间换时间的函数。
        内联函数有些类似于宏。内联函数的代码会被直接嵌入在它被调用的地方，调用几次就嵌入几次，没有使用call指令。这样省去了函数调用时的一些额外开销，比如保存和恢复函数返回地址等，可以加快速度。不过调用次数多的话，会使可执行文件变大，这样会降低速度。相比起宏来说，内核开发者一般更喜欢使用内联函数。因为内联函数没有长度限制，格式限制。编译器还可以检查函数调用方式，以防止其被误用。
        static _inline的内联函数，一般情况下不会产生函数本身的代码，而是全部被嵌入在被调用的地方。如果不加static，则表示该函数有可能会被其他编译单元所调用，所以一定会产生函数本身的代码。所以加了static，一般可令可执行文件变小。内核里一般见不到只用inline的情况，而都是使用static inline。
------------------------------------------------------------------------------------------
        存储限定符 __inline 与关键字 inline 的语义完全相同，不影响函数的类型，建议编译器在合理的情况下内联编译 C/C++ 函数。
        内联减少了函数调用的开销，但却增加了代码量。
   inline 仅用于 C++，__inline和 __forceinline 用于 C/C++。
        关键字inline表明要优化函数的可执行代码，这可以通过将函数的代码合并到调用程序的代码中来实现。Linux内核使用的inline函数大多被定义为static 类型。一个"static inline"函数促使编译程序尝试着将其代码插入到所有调用它的程序中。
        这一合并能够免除函数调用的任何开销，#define语句也可以排除额外的函数调用。
        另外，使用inline会增加二进制映像的大小，而这会降低访问CPU高速缓存的速度，所以不能在所有的函数定义中使用它。
------------------------------------------------------------------------------------------
 inline函数的注意事项
    一般写在头文件中
    只在release版本生效
    给编译器的一个建议，循环、递归、switch一定不会出现inline。
    inline基于实现，不是基于声明，即在声明点无效（先声明后内联）
******************************************************************************************
******************************************************************************************
linux 中的c程序可使用
getpid()  返回当前进程pid
getppid  返回父进程pid

#include <sys/types.h>
#include <unistd.h>

pid_t getpid(void);
pid_t getppid(void);
******************************************************************************************
******************************************************************************************
fork() 可创建子进程

pid_t pid;
pid = fork();
if(0 == pid)
{
    子进程程序
}else if(0 < pid)
{
    父进程程序
}

父进程使用wait()函数等待子进程结束
若父进程结束子进程未结束，则该子进程成为孤儿进程，交给init进程管理
init进程是系统启动后的第一个进程
******************************************************************************************
******************************************************************************************
//多线程
1 线程依附于进程(1个进程可以创建多个线程)
2 进程结束，线程也结束
3 线程是用来解决多个任务同时运行的问题

如何创建子线程（在进程中创建线程）
#include <pthread.h>

int pthread_create(pthread_t *thread, pthread_arrt_t *attr, void *(*start_routine)(void *), void *arg);
功能: 新建一个线程
参数: thread [出参]  当创建线程时，linux系统会给thread写入一个值(线程id) 
      attr   [入参]  创建线程时，给线程指定的属性  (一般填入 NULL, 表示属性是默认的)
      start_routine   当创建线程时，线程执行的函数
      arg   类型 void *,   为start_routine 传递的参数

void *(*start_routine)(void *)  ----> start_routine 是一个函数指针，指向的函数返回void *， 参数是void *

创建一个线程实例：
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
void *fun(void *p)
{
	while(1)	//无限循环
	{
		printf("thread is running\n");
		sleep(1);
	}
}
int main()
{
	pthread_t id;
	pthread_create(&id, NULL, fun, NULL);
	while(1)	//无限循环
	{
		printf("main is running\n");
		sleep(1);
	}
}

编译多线程程序注意的地方//////gcc hello.c -lpthread
-lpthread  -l 表示指定第三方库的名称， pthread 库，全称 libpthread.so
多线程并不是 linux的自带的库，是一个第三方库，就需要用-l 指定


/////////////////////////////
pthread_join();    ///函数功能：主进程如果执行到此函数，将阻塞，等待子线程结束

#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
void *fun1(void *p)
{
	while(1)	//无限循环
	{
		printf("1 is running\n");
		sleep(1);
	}
}
void *fun2(void *p)
{
	while(1)	//无限循环
	{
		printf("2 is running\n");
		sleep(1);
	}
}
int main()
{
	pthread_t id1, id2;
	pthread_create(&id1, NULL, fun1, NULL);
	pthread_create(&id2, NULL, fun2, NULL);
	pthread_join(id1, NULL);
}

线程参数

//////////////实例：传递字符串给线程/////////////////////
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
void *fun(void *p)
{
	while(1)	//无限循环
	{
		printf("%s\n", (char *)p);	//(char *)p 强制类型转换
		sleep(1);
	}
}
int main()
{
	pthread_t id;
	char *s1 = "hello hello hello";
	pthread_create(&id, NULL, fun, s1);
	while(1)	//无限循环
	{
		printf("main is running\n");
		sleep(1);
	}
}
void *  无类型指针，可以定义 和 赋值，但不可以 *p,  p++, p--

//////////////实例：传递整形变量给线程/////////////////////
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
void *fun(void *p)	//void * 接收任意类型的指针，
{
	int *q = p;
	while(1)	//无限循环
	{
		printf("a is %d\n", *q);	//*(int *)p
		sleep(1);
	}
}
int main()
{
	pthread_t id;
	int a = 100;
	pthread_create(&id, NULL, fun, &a);
	while(1)	//无限循环
	{
		printf("main is running\n");
		sleep(1);
	}
}
------------------------------------------------------------------------------------------
//////线程同步(mutex)
//////互斥锁，用来解决共享资源同步的问题，
1 创建互斥锁(互斥锁初始化)
pthread_mutex_t mutex;		//定义互斥锁， mutex 互斥锁
pthread_mutex_init(&mutex, NULL);		//初始化互斥锁

2 加锁
pthread_mutex_lock(&mutex);	//加锁，如果现在没有线程已经加锁，那么加锁成功，使用共享资源
				//如果有线程正在使用锁，那么加速失败，阻塞等待
3 解锁
pthread_mutex_unlock(&mutex);	//如果有任务正在等待解锁，那么此任务 从阻塞态变成 就绪态

#include <stdio.h>
#include <pthread.h>
pthread_mutex_t mutex;		//定义互斥锁， mutex 互斥锁
int a[10] = { 0 };      ///共享资源
int i;
void *fun1()
{
	while(1)
	{
		int i;
		pthread_mutex_lock(&mutex);	//使用前 加锁
		for(i = 0; i < 10; i++)
			a[i] = i;	//a 0,1,2,3,4,5,6,7,8,9
		sleep(2);
		for(i = 0; i < 10; i++)
			printf("a[%d] is %d\n", i, a[i]);		
		pthread_mutex_unlock(&mutex);	//使用完，解锁
		sleep(1);
	}
}
void *fun2()
{
	while(1)
	{
		sleep(1);
		pthread_mutex_lock(&mutex);	//使用前 加锁
		for(i = 0; i < 10; i++)
			a[i] = 1;
		for(i = 0; i < 10; i++)
			printf("a[%d] is %d\n", i, a[i]);
		pthread_mutex_unlock(&mutex);	//使用完，解锁
	}
}
int main()
{
	pthread_t id1, id2;
	pthread_mutex_init(&mutex, NULL);		//初始化互斥锁
	pthread_create(&id1, NULL, fun1, NULL);
	pthread_create(&id2, NULL, fun2, NULL);
	pthread_join(id1, NULL);
}
------------------------------------------------------------------------------------------
信号量  (semaphore 简写   sem)
同样可以解决共享资源互斥和同步的问题

信号量可以控制多个共享资源
#include <semaphore.h>
sem_t sem;		//定义一个信号量

1 创建信号量(初始化信号量)
int sem_init(sem_t *sem, int pshared, unsigned int value);
参数:
	sem[出参]  当创建信号量成功之后，会将信息填入sem变量中
	pshared  通常为0， 表示多线程之间使用信号量
	value    共享资源个数
sem_init(&sem, 0, 3);	//拥有3个共享资源
sem_init(&sem, 0, 1);	//拥有1个共享资源, 就相当于互斥锁
sem_init(&sem, 0, 0);	//共享资源个数是0，也可以，此种情况主要用于同步

2 请求信号量
sem_wait(&sem);		//如果共享资源个数 >0, 那么请求成功，共享资源个数-1
			//如果共享资源个数 = 0， 那么请求失败，阻塞等待
3 释放信号量
sem_post(&sem);		//释放信号量，同时将共享资源个数 +1, wait的线程解除阻塞
 
四个线程共享3个信号量 实例
sem_t sem;
sem_init(&sem, 0, 3);	//拥有3个共享资源
线程A请求信号量
	sem_wait(&sem);	//请求成功，个数 -1  = 2
线程B请求信号量
	sem_wait(&sem);	//请求成功，个数 -1  = 1
线程C请求信号量
	sem_wait(&sem);	//请求成功，个数 -1  = 0
线程D请求信号量
	sem_wait(&sem);	//请求失败，阻塞等待
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
sem_t sem;	//定义信号量

int a[10] = { 0 };      ///共享资源
int i;
void *fun1()
{
	while(1)
	{
		int i;
		sem_wait(&sem);
		for(i = 0; i < 10; i++)
			a[i] = i;	//a 0,1,2,3,4,5,6,7,8,9
		sleep(2);
		for(i = 0; i < 10; i++)
			printf("a[%d] is %d\n", i, a[i]);		
		sem_post(&sem);	
		sleep(1);
	}
}
void *fun2()
{
	while(1)
	{
		sleep(1);
		sem_wait(&sem);		//请求信号量
		for(i = 0; i < 10; i++)
			a[i] = 1;
		for(i = 0; i < 10; i++)
			printf("a[%d] is %d\n", i, a[i]);
		sem_post(&sem);		//释放信号量
	}
}
int main()
{
	pthread_t id1, id2;
	sem_init(&sem, 0, 1);	//拥有1个共享资源	
	pthread_create(&id1, NULL, fun1, NULL);
	pthread_create(&id2, NULL, fun2, NULL);
	pthread_join(id1, NULL);
}
同步:
两个任务一定按照指定顺序执行
同步
ABABABABABABABABA
不同步
ABBAABABABAB

思路: 
1) 创建一个信号量，共享资源个数0
2) 显示任务(Y)， 运行就请求信号量，请求失败，等待
3) 解码任务(M), 一旦解码完成，就释放(发送)信号量， 显示任务被激活，显示

///////////
练习   funY线程的运行由funM决定(funM通知funY运行)
M
Y
M
Y
M
Y
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <semaphore.h>
sem_t sem;	//定义信号量
void *funM(void *p)
{
	while(1)	//无限循环
	{
		printf("M\n");	
		sem_post(&sem);		//释放信号量
		sleep(1);
	}
}
void *funY(void *p)
{
	while(1)	//无限循环
	{
		sem_wait(&sem);		//请求信号量， 因为个数为0，所以阻塞等待
		printf("Y\n");	
	}
}
int main()
{
	pthread_t id;
	sem_init(&sem, 0, 0);	//拥有0个共享资源, 主要用于同步
	pthread_create(&id, NULL, funM, NULL);
	pthread_create(&id, NULL, funY, NULL);
	pthread_join(id, NULL);
}
------------------------------------------------------------------------------------------
ctrl + z   将一个进程暂停
如果继续运行
fg 1
jobs   列出所有被暂停的进程

kill -l
 1) SIGHUP	 2) SIGINT	 	3) SIGQUIT	4) SIGILL   	5) SIGTRAP
 6) SIGABRT	 7) SIGBUS	8) SIGFPE	 	9) SIGKILL		10) SIGUSR1
11) SIGSEGV	12) SIGUSR2	13) SIGPIPE	14) SIGALRM	15) SIGTERM
16) SIGSTKFLT	17) SIGCHLD	18) SIGCONT	19) SIGSTOP	20) SIGTSTP
21) SIGTTIN	22) SIGTTOU	23) SIGURG	24) SIGXCPU	25) SIGXFSZ
26) SIGVTALRM	27) SIGPROF	28) SIGWINCH	29) SIGIO   	30) SIGPWR
31) SIGSYS	34) SIGRTMIN	35) SIGRTMIN+1	36) SIGRTMIN+2	37) SIGRTMIN+3
38) SIGRTMIN+4	39) SIGRTMIN+5	40) SIGRTMIN+6	41) SIGRTMIN+7	42) SIGRTMIN+8
43) SIGRTMIN+9	44) SIGRTMIN+10	45) SIGRTMIN+11	46) SIGRTMIN+12	47) SIGRTMIN+13
48) SIGRTMIN+14	49) SIGRTMIN+15	50) SIGRTMAX-14	51) SIGRTMAX-13	52) SIGRTMAX-12
53) SIGRTMAX-11	54) SIGRTMAX-10	55) SIGRTMAX-9	56) SIGRTMAX-8	57) SIGRTMAX-7
58) SIGRTMAX-6	59) SIGRTMAX-5	60) SIGRTMAX-4	61) SIGRTMAX-3	62) SIGRTMAX-2
63) SIGRTMAX-1	64) SIGRTMAX	

2)  SIGINT   (ctrl + c)     默认操作 结束进程
3)  SIGQUIT  (ctrl + \)     默认操作 结束进程
20) SIGTSTP  (ctrl + z)
14) SIGALRM  (定时器信号，定时时间到，linux系统会自动发送此信号)  默认操作 忽略
9) SIGKILL   (此信号就用来结束某个进程)      kill -9 11111   默认操作 结束进程，并且不可以忽略
------------------------------------------------------------------------------------------
信号（多进程之间的一种通信方式）
信号有三种处理方式
1) 忽略信号
2) 捕获信号
3) 执行默认操作

如何捕获信号
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
void fun(int nu)
{
	printf("receive sinal ctrl + c\n");
	exit(0);	//exit 函数可以结束进程
}
int main()
{
	signal(SIGINT, fun);	//能向系统注册一个函数fun，当产生SIGINT信号时，自动执行fun
	while(1);
}

练习：当用户在键盘上输入Ctrl + \ 时，会收到SIGQUIT信号，我们写程序，捕获到这个信号，并打印信号值
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
void fun(int nu)
{
	printf("receive sinal %d\n", nu);
	exit(0);	//exit 函数可以结束进程
}
int main()
{
	signal(SIGQUIT, fun);	//能向系统注册一个函数fun，当产生SIGQUIT信号时，自动执行fun
	while(1);
}

signal(SIGQUIT, SIG_IGN);   //SIG_IGN 忽略信号

如何发送信号（一个进程给另一个进程发送信号）
kill 函数
int kill(pid_t pid, int sig);
参数: pid  进程的pid值
      sig  信号值

kill(11111, 9);			//给11111 进程发送信号9(SIGKILL)
kill(11111, 2);			//给11111 进程发送信号2(ctrl + c)

#include <stdio.h>
int main()
{
	kill(11111, 2);
}

//练习：有两个进程，一个进程接收SIGINT信号，收到后将信号编号打印出来，
                    另一个进程负责发送SIGINT信号给那个进程，
      要求第二进程(发送SIGINT信号的进程)，进程ID号不写固定值，信号值不写固定值
./a   
myid is ....

./b 11111 2      ////////进程pid号和信号值都由参数传递给程序
"11111"   可以用atoi, 将字符串转换成int      int pid = atoi("11111");

///发信号进程
#include <signal.h>
#include <stdio.h>
int main(int argc, char *argv[])
{
	if(argc < 3)
	{
		printf("param error, like this ./send 11111 2\n");
		return 0;
	}
	kill(atoi(argv[1]), atoi(argv[2]));
}
////收信号进程
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
void fun(int nu)
{
	printf("receive signal %d\n", nu);
	exit(0);
}
int main()
{
	printf("myid is %d\n", getpid());
	signal(SIGINT, fun);
	while(1);
}
******************************************************************************************
******************************************************************************************
std的函数及变量
------------------------------------------------------------------------------------------
1. std::stringstream

用于格式转换或长字符串拼接
例子1：
  std::stringstream m_sstream;
  std::string result;
  int i=1000;
  m_sstream<<i;
  m_sstream>>result;
  std::cout<<result<<"\n";
例子2：
std::string to_string() const {
        std::stringstream ss;
        ss << "\ninp.current_position = [" << join(current_position) << "]\n";
        ss << "inp.current_velocity = [" << join(current_velocity) << "]\n";
        ss << "inp.current_acceleration = [" << join(current_acceleration) << "]\n";
        ss << "inp.target_position = [" << join(target_position) << "]\n";
        ss << "inp.target_velocity = [" << join(target_velocity) << "]\n";
        ss << "inp.target_acceleration = [" << join(target_acceleration) << "]\n";
        ss << "inp.max_velocity = [" << join(max_velocity) << "]\n";
        ss << "inp.max_acceleration = [" << join(max_acceleration) << "]\n";
        ss << "inp.max_jerk = [" << join(max_jerk) << "]\n";
        if (min_velocity) {
            ss << "inp.min_velocity = [" << join(min_velocity.value()) << "]\n";
        }
        if (min_acceleration) {
            ss << "inp.min_acceleration = [" << join(min_acceleration.value()) << "]\n";
        }
        if (!intermediate_positions.empty()) {
            ss << "inp.intermediate_positions = [\n";
            for (auto p: intermediate_positions) {
                ss << "    [" << join(p) << "],\n";
            }
            ss << "]\n";
        }
        return ss.str();
    }
------------------------------------------------------------------------------------------
2. std::chrono

C++11 中提供了一个计时的标准库 <chrono>;
里面有三种时钟 clock: steady_clock， system_clock 和 high_resolution_clock;
区别
    steady_clock 是单调的时钟，相当于教练手中的秒表；只会增长，适合用于记录程序耗时；
    system_clock 是系统的时钟；因为系统的时钟可以修改；甚至可以网络对时； 所以用系统时间计算时间差可能不准。
    high_resolution_clock 是当前系统能够提供的最高精度的时钟；它也是不可以修改的。相当于 steady_clock 的高精度版本。

例子1
一个用来测试代码段运行时间的宏
    #include <chrono>
     
    #define TIMERSTART(tag) auto tag##_start = std::chrono::steady_clock::now(),tag##_end = tag##_start
    #define TIMEREND(tag) tag##_end = std::chrono::steady_clock::now()
    #define DURATION_s(tag) printf("%s costs %d s\n",#tag,std::chrono::duration_cast<std::chrono::seconds>(tag##_end - tag##_start).count())
    #define DURATION_ms(tag) printf("%s costs %d ms\n",#tag,std::chrono::duration_cast<std::chrono::milliseconds>(tag##_end - tag##_start).count());
    #define DURATION_us(tag) printf("%s costs %d us\n",#tag,std::chrono::duration_cast<std::chrono::microseconds>(tag##_end - tag##_start).count());
    #define DURATION_ns(tag) printf("%s costs %d ns\n",#tag,std::chrono::duration_cast<std::chrono::nanoseconds>(tag##_end - tag##_start).count());
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
******************************************************************************************
******************************************************************************************
if constexpr
------------------------------------------------------------------------------------------
普通的 if-else 是在执行期进行条件判断与选择, 这意味着在泛型编程中无法使用
if-else 语句进行条件判断. 比如例 1 会引起编译错误
例 1: 将多个数累加并返回累加结果
template <int N, int... Ns>
auto sum()
{
    if (sizeof...(Ns) == 0) // 若参数包为空, 直接返回 N
        return N;
    else                    // 否则进行递归调用
        return N + sum<Ns...>();
}
// 调用
sum<1, 2, 3>();

C++17 之前, 必须利用多个模板才能完成例 1 的功能
例 2: C++17 之前, 将多个数累加并返回累加结果
// 只有一个模板参数时调用此模板
template<int N>
int sum()
{
    return N;
}
// 模板参数 > 2 个时调用此模板
template <int N, int N2, int... Ns>
int sum()
{
    return N + sum<N2, Ns...>();
}
// 调用
sum<1, 2, 3>(); // returns 6

C++17 引入 constexpr if 支持在编译期执行, 可以将之应用于泛型编程中的条件判断,如例 3.
例 3: C++17, 将多个数累加并返回累加结果
template <int N, int... Ns>
auto sum()
{
    if constexpr (0 == sizeof...(Ns))
        return N;
    else
        return N + sum<Ns...>();
}
// 调用
sum<1, 2, 3>(); // returns 6

更简单的是利用 C++17 提供的新功能 “折叠表达式”, 如例 4.
例 4: 利用折叠表达式实现多个数累加并返回累加结果
template<typename ...Ns>
auto sum(Ns... ns) {
    return (ns + ...);
}
// 调用
sum(1, 2, 3); // returns 6
------------------------------------------------------------------------------------------
constexpr if 可以应用更多的场合, 比如要将数值转化为字符串. 在 C++17之前, 需要使用 std::enable_if 来判断参数类型, 如例 5
例 5
// 数值转换
template<typename T>
std::enable_if_t<std::is_integral<T>::value, std::string>
to_string(T t)
{
    return std::to_string(t);
}
template<typename T>
std::enable_if_t<!std::is_integral<T>::value, std::string>
to_string(T t)
{
    return t;
}

而在 C++17 中可以利用 constexpr if 完成相同功能, 且摒弃了冗长的std::enable_if 语句, 不仅代码可读性好, 而且书写也更方便, 如例6
例 6
template<typename T>
auto to_string(T t)
{
    if constexpr(std::is_integral<T>::value)
        return std::to_string(t);
    else
        return t;
}

便是要注意在 constexpr if 中的 return 语句, 下面的写法是不对的, 应当在条件语句的分支中 return
template<typename T>
auto to_string(T t)
{
    if constexpr(std::is_integral<T>::value)
        return std::to_string(t);
    // 此处需要 else
    return t;
}
------------------------------------------------------------------------------------------
正如许多 C++ 著作中提到的, 如果一个函数中使用了大量的 if-else 语句,
那么需要重构, 将多个条件语句转化成函数重载会更加清晰. 同理,
如果泛型函数中使用大量的 constexpr if 语句, 也许也需要考虑代码重构.
******************************************************************************************
******************************************************************************************
获取变量名字
 #define VARNAME(x)   (#x)

#表示了在宏替换阶段后面的使用双引号引起来
例子：
#include <iostream>
#define VARNAME(x)   (#x)
int main()
{
    p0 = 100;
    std::cout << VARNAME(p0) << " = " << p0 <<std::endl;
    return 0;
}

上面代码的输出是
p0 = 100
******************************************************************************************
******************************************************************************************
qt中使用串口读取函数的时候，一定要使用connect与ReadReady信号相连，
使用while循环去一遍一遍读取的话，会有几率出现内存访问越界问题，有时程序运行2秒后就出现，有时几分钟，平均2分钟左右会出现，
原因未知。
******************************************************************************************
******************************************************************************************
volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改，
比如：操作系统、硬件或者其它线程等。遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。
声明时语法：int volatile vInt; 当要求使用 volatile 声明的变量的值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。而且读取的数据立刻被保存。
******************************************************************************************
******************************************************************************************
__iomem
#ifdef __CHECKER__
# define __iomem    __attribute__((noderef, address_space(2)))     // 主要是用于编译器的检查，检查地址空间的有效性
#else
# define __iomem
#endif
从__CHECKER__和address_space(2)这两个信息可以看出，当基于Sparse进行通过__iomem修饰的void类型指针需要落到特定地址空间，否则会吐出警告信息。
__iomem存在的意义是kernel系统同时兼容了X86和ARM等类型的处理器平台，
对于这两种典型的处理器平台而言，其寄存器访问方式是完全不同的。
X86架构的处理器是基于IO指令进行寄存器访问的，
而ARM架构的处理器是基于真实存在的32或64位的AMBA总线地址空间来访问寄存器的。
------------------------------------------------------------------------------------------
ioremap
#define ioremap(cookie,size)           __ioremap(cookie,size,0)
void __iomem * __ioremap(unsigned long phys_addr, size_t size, unsigned long flags);
在将I/O内存资源的物理地址映射成核心虚地址后，理论上讲我们就可以象读写RAM那样直接读写I/O内存资源了。为了保证驱动程序的跨平台的可移植性，我们应该使用Linux中特定的函数来访问I/O内存资源，而不应该通过指向核心虚地址的指针来访问。
读写I/O的函数如下所示：
a -- writel()
writel()往内存映射的 I/O 空间上写数据，wirtel()  I/O 上写入 32 位数据 (4字节)。
 原型：void writel (unsigned char data , unsigned int addr )
b -- readl()
readl() 从内存映射的 I/O 空间上读数据,readl 从 I/O 读取 32 位数据 ( 4 字节 )。
原型：unsigned char readl (unsigned int addr )
------------------------------------------------------------------------------------------
iounmap
void iounmap(volatile void __iomem *addr);
释放ioremap映射的内存
******************************************************************************************
******************************************************************************************
一般我们编写C程序时，要调用某个文件中的函数，需要在本文件中包含声明有被调用函数的头文件，然后编译连接后，方能找到调用函数。对于模块依赖的情况，不能简单的使用上面的方法，
内核提供了一个机制，就是EXPORT_SYMBOL标签内定义的函数或者符号对全部内核代码公开，不用修改内核代码就可以内核模块中直接调用，即使用EXPORT_SYMBOL可以将一个函数以符号的方式导出给其他模块使用。    
EXPORT_SYMBOL只出现在2.6内核中以及后面版本，因为2.6默认不导出所有的符号，在2.4内核默认的非static 函数和变量都会自动导入到kernel 空间的， 都不用EXPORT_SYMBOL() 做标记。
相比System.map，System.map 中的是连接时的函数地址。连接完成以后，在2.6内核运行过程中，是不知道哪个符号在哪个地址的。
而EXPORT_SYMBOL的符号， 是把这些符号和对应的地址保存起来，在内核运行的过程中，可以找到这些符号对应的地址。
而模块在加载过程中，其本质就是能动态连接到内核，果在模块中引用了内核或其它模块的符号，就要EXPORT_SYMBOL这些符号，这样才能找到对应的地址连接。

使用方法：
在模块函数定义之后使用EXPORT_SYMBOL（函数名）。
如在A.c中写
int func1(void)
{
    printk("In Func: %s...\n",__func__);
    return 0;
}
EXPORT_SYMBOL(func1);

在调用该函数的模块中使用extern再对之声明一次。
如在B.c中
extern int func1(void);
 
首先加载定义该函数的模块，再加载调用该函数的模块。
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------







