******************************************************************************************
******************************************************************************************
       _inline函数也称为内联函数或内嵌函数，_inline定义的类的内联函数，函数代码被放入符号调用表，使用时直接展开，不需要调用，即在编译期间将所调用的函数的代码直接嵌入到主调函数中，是一种以空间换时间的函数。
        内联函数有些类似于宏。内联函数的代码会被直接嵌入在它被调用的地方，调用几次就嵌入几次，没有使用call指令。这样省去了函数调用时的一些额外开销，比如保存和恢复函数返回地址等，可以加快速度。不过调用次数多的话，会使可执行文件变大，这样会降低速度。相比起宏来说，内核开发者一般更喜欢使用内联函数。因为内联函数没有长度限制，格式限制。编译器还可以检查函数调用方式，以防止其被误用。
        static _inline的内联函数，一般情况下不会产生函数本身的代码，而是全部被嵌入在被调用的地方。如果不加static，则表示该函数有可能会被其他编译单元所调用，所以一定会产生函数本身的代码。所以加了static，一般可令可执行文件变小。内核里一般见不到只用inline的情况，而都是使用static inline。
------------------------------------------------------------------------------------------
        存储限定符 __inline 与关键字 inline 的语义完全相同，不影响函数的类型，建议编译器在合理的情况下内联编译 C/C++ 函数。
        内联减少了函数调用的开销，但却增加了代码量。
   inline 仅用于 C++，__inline和 __forceinline 用于 C/C++。
        关键字inline表明要优化函数的可执行代码，这可以通过将函数的代码合并到调用程序的代码中来实现。Linux内核使用的inline函数大多被定义为static 类型。一个"static inline"函数促使编译程序尝试着将其代码插入到所有调用它的程序中。
        这一合并能够免除函数调用的任何开销，#define语句也可以排除额外的函数调用。
        另外，使用inline会增加二进制映像的大小，而这会降低访问CPU高速缓存的速度，所以不能在所有的函数定义中使用它。
------------------------------------------------------------------------------------------
 inline函数的注意事项
    一般写在头文件中
    只在release版本生效
    给编译器的一个建议，循环、递归、switch一定不会出现inline。
    inline基于实现，不是基于声明，即在声明点无效（先声明后内联）
******************************************************************************************
******************************************************************************************