******************************************************************************************
******************************************************************************************
实时运算（Real-time computing）是计算机科学中对受到“实时约束”的计算机硬件和计算机软件系统的研究，实时约束像是从事件发生到系统回应之间的最长时间限制。实时程序必须保证在严格的时间限制内响应。

1. 实时的消息、事件处理机制。
常规的操作系统中，消息队列都是按照FIFO（先进先出）的方式进行调度，如果有多个接受者，那么接受者也是按照FIFO的原则接受消息（数据），但实时操作系统会提供基于优先级的处理方式：两个任务优先级是分别是10和20，同时等待一个信号量，如果按照优先级方式处理，则优先级为10的任务会优先收到信号量。

2. 提供内核级的优先级翻转处理方式
实时操作系统调度器最经常遇到的问题就是优先级翻转，因此对于类似信号量一类的API，都能提供抑止优先级翻转的机制，防止操作系统死锁。

3. 减少粗粒度的锁和长期关中断的使用
这里的锁主要是指自旋锁(spinlock)一类会影响中断的锁，也包括任何关中断的操作。在Windows和Linux的驱动中，为了同步的需要，可能会长期关闭中断，这里的长期可能是毫秒到百微秒级。但实时操作系统通常不允许长期关中断。
对于非实时操作系统来说，如果收到一个外部中断，那么操作系统在处理中断的整个过程中可能会一直关中断。但实时操作系统的通常做法是把中断作为一个事件通告给另外一个任务，interrupt handler在处理完关键数据以后，立即打开中断，驱动的中断处理程序以一个高优先级任务的方式继续执行。

4. 系统级的服务也要保证实时性
对于一些系统级的服务，比如文件系统操作，非实时系统会缓存用户请求，并不直接把数据写入设备，或者建立一系列的线程池，分发文件系统请求。但实时系统中允许高优先级的任务优先写入数据，在文件系统提供服务的整个过程中，高优先级的请求被优先处理，这种高优先级策略直到操作完成。
这种设计实际上会牺牲性能，但实时系统强调的是整个系统层面的实时性，而不是某一个点（比如内核）的实时性，所以系统服务也要实时。
由于应用场景的差异，会出现有些用户需要实时性的驱动，有些用户需要高性能的驱动，因此实时操作系统实际上要提供多种形式的配置以满足不同实时性需求的用户。

5. 避免提供实时性不确定的API
多数实时操作系统都不支持虚拟内存（page file/swap area），主要原因是缺页中断（page fault）会导致任务调度的不确定性增加。实时操作系统很多都支持分页，但很少会使用虚拟内存，因为一次缺页中断的开销十分巨大（通常都是毫秒级），波及的代码很多，导致用户程序执行的不确定性增加。
实时操作系统的确定性是一个很重要的指标，在某些极端场景下，甚至会禁用动态内存分配（malloc/free），来保证系统不受到动态的任务变化的干扰。

6. 提供针对实时系统调度的专用API
比如ARINC 653标准中就针对任务调度等作出了一系列的规定，同时定义了特定的API接口和API行为，这些API不同于POSIX API，如果实时系统要在航空设备上使用，就可能需要满足ARINC 653的规范。

7. 降低系统抖动
由于关中断等原因，通常情况下，操作系统的调度器不会太精确的产生周期性的调度，比如x86早期的默认60的时钟周期（clock rate），抖动范围可能在15-17ms之间。但一个设计优秀的实时操作系统能把调度器的抖动降低到微秒甚至百纳秒一级，在像x86这种天生抖动就很大的架构上，降低系统抖动尤其重要。

8. 针对实时性设计的SMP和虚拟化技术
SMP（多核）场景的实时调度是很困难的，这里还涉及到任务核间迁移的开销。针对SMP场景，多数实时操作系统的设计都不算十分优秀，但比起普通操作系统来说，其实时性已经好很多了。
同时实时操作系统的虚拟化能从hypervisor层面上提供虚拟机级别的实时调度，虚拟机上可以是另外一个实时系统，也可以是一个非实时系统。
******************************************************************************************
******************************************************************************************
非实时操作系统  
时间分片原理
单位时间分成多份，每份时间分配给不同任务，某个任务的优先级再高也不会在别的任务执行时插入执行，任务优先级高的分配的时间多，而不是可以抢占

实时操作系统   FreeRTOS   uCos
抢占式任务分配原理
优先级高的可以在优先级低的任务执行时插入先执行

复杂项目
中控中心用Linux系统
分节点用FreeRTOS
******************************************************************************************
******************************************************************************************
做项目先选芯片然后选操作系统
------------------------------------------------------------------------------------------
ARM
A系列
性能好，常用于民用设备，手机、平板等，常用有A9、A53早期有A7(低端)，就是为民用设计的
主要跑linux、android
8核手机：4核低端CPU+4核低端CPU
普通工作时用4核低端CPU功耗低，打游戏时用高端的处理图像
12核电视
4核高端CPU+4核低端CPU+2核音频解码+2核视频解码
------------------------------------------------------------------------------------------
M系列
用于嵌入式设备
STM32F407 STM32F429
一般100M~300M
主要跑FreeRTOS   uCos
******************************************************************************************
******************************************************************************************
嵌入式教程笔记——linux内核及交叉编译

linux系统构建
1) 开发板介绍
	三星 exynos4412 系列处理
	基于Cortex A9的处理器 (民用设备)
	exynos 4412  1.5GHz  4核处理器
	2G  RAM
	8G  flash
	核心板 + 外设板

2) 开发板使用及启动流程
	putty.exe   终端(可以在windows 上显示并控制开发板)    windows 超级终端
	配置串口  serial
	波特率 115200

	先启动uboot  然后导入kernel并执行，接下来执行rootfs

	uboot 可以使用 help命令 查看帮助

	kernel 完全可以使用linux的命令

3) 交叉编译环境安装 及 测试
	gcc 是基于 x86 cpu的， 但是编译的程序不能在开发板上运行(因为开发板基于ARM cpu的)

linux@ubuntu:~$ file hello
hello: ELF 32-bit LSB executable, Intel 80386, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=0xd51ca3f9d47715852fa8604fcd817186398d5a5f, not stripped

	所以 有两个方法
	1) 在ubuntu上安装交叉编译环境 (ubuntu上编译，开发板上运行)
	2) 开发板上安装gcc ， 直接在开发板上编译

	需要安装交叉编译工具链
	cd ~
	mkdir toolchain
	cp gcc-4.6.4.tar.xz toolchain    
	cd toolchain
	tar xvf gcc-4.6.4.tar.xz   
		tar 压缩解压命令
		x   解压
		v   显示压缩过程
		f   将多个文件打包放到一个文件中
	sudo gedit /etc/bash.bashrc      
		sudo 切换到管理员权限执行 (/etc目录下的文件，普通用户无法修改) 
		gedit  文本编辑器
		/etc/bash.bashrc       终端的配置文件

	export PATH=$PATH:/home/linux/toolchain/gcc-4.6.4/bin 
		export   设置环境变量
		PATH     记录了可执行文件的搜索路径的 环境变量 
		PATH目录中有 arm-none-linux-gnueabi-gcc 命令
	source /etc/bash.bashrc
		重启配置
	arm-none-linux-gnueabi-gcc -v    (-v查看版本号)
		测试交叉编译工具是否安装成功
程序测试	
	arm-none-linux-gnueabi-gcc hello.c -o hello1
	file hello1
	hello1: ELF 32-bit LSB executable, ARM, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.38, not stripped

4) tftp环境测试  
	tftp (一个简易的tfp服务， 一个简易的文件共享服务，主要用于嵌入式开发板中)
目标: 将hello1 下载到开发板中执行
	1) 配置 ubuntu为桥接模式，并手动配置ip地址  (不用做)
		桥接模式:  虚拟交换机(wmware 模拟了一个交换机)
		NAT模式:   windows 和 linux共用网卡 (虚拟机只能访问windows，无法访问其他主机)
		sudo ifconfig eth0 192.168.3.111
		sudo   切换到管理员
		ifconfig  查看或者配置 ip地址
		eth0   第一个以太网卡
		192.168.3.111		ip地址
	2) 给windows配ip地址 (tftp服务 在windows上)
		不可以自动分配
		手动配置为  192.168.3.111
	3) 配置开发板ip地址
		ifconfig eth0 192.168.3.110
		ping 192.168.3.111	或者 在 ubuntu上ping 开发板 192.168.3.110
	4) 启动tftpserver (确保防火墙关闭)
		tftpd---> configure--->设置共享目录
		tftpd---> start
		将 hello1 放到 tftp共享目录中
	5) 在开发板上执行
		tftp -g -r hello1 192.168.3.111
		chmod +x hello1		//给hello1 增加可执行权限
		./hello1
5 还原开发板 (用原始的镜像文件 还原开发板)
实验 二.2、从EMMC 加载内核和文件系统
	EMMC (flash的标准接口  可以认为 EMMC就是flash)

	uImage  linux内核	
	ramdisk.img   根文件系统 (被加载到内存中执行)
	exynos4412-fs4412.dtb  设备树文件
	u-boot-fs4412.bin  bootloader
	1) 将 镜像文件 从 tftp共享文件夹中，下载到 flash中 (uboot通过以太网卡下载)
		(1) 将uImage、ramdisk.img、exynos4412-fs4412.dtb拷贝到tftpshare文件夹中
		(2) 在uboot中配置 自己的ip地址 和 tftp服务器ip地址
		setenv serverip 192.168.3.111    (tftp服务器ip地址)
		setenv ipaddr 192.168.3.110      (自己的ip地址)
		saveenv                
		setenv 设置环境变量
		saveenv 保存环境变量
		pri  (print  printev)    打印环境变量值
		(3) 将uImage 从 tftp共享文件夹中下载到开发板内存中
		tftp 41000000 uImage		
			tftp  下载命令
			41000000 内存地址
		movi write kernel 41000000
			movi wrtie 写flash
			kernel  是flash的kernel 分区
			41000000 是刚才的内存地址(里面保存了uImage)
		(4)  烧写设备树文件到EMMC 上
		tftp 41000000 exynos4412-fs4412.dtb
		movi write dtb 41000000		//dtb 设备树分区
		(5)  烧写文件系统镜像到EMMC 上
		tftp 41000000 ramdisk.img
		movi write rootfs 41000000 300000     //根文件系统分区
			//保存环境变量
	2) 配置开发板从 flash启动	
		(1) 设置启动参数		
		setenv bootcmd movi read kernel 41000000\;movi read dtb 42000000\;movi read rootfs 43000000 300000\;bootm 41000000 43000000 42000000
		bootcmd 启动命令
		movi read kernel 41000000		//读kernel 到内存中
		movi read dtb 42000000                  //读设备树到 42000000
		bootm 41000000 43000000 42000000	//启动内核 在 41000000 42000000 43000000
		(2) saveenv	

5 linux 内核移植 (linux 内核裁剪       linux 内核构建)
	目标: 制作一个微内核linux系统 ， 运行在4412 开发板上
	1) 到官方网站下载一个 linux内核源码(www.kernel.org)
		第三天/源码/linux-3.14.tar.xz
	2) 拷贝到ubuntu系统中，并解压
		tar xvf linux-3.14.tar.xz
	3) 进入linux内核源码目录
		cd linux-3.14
	4) 修改Makefile  
		修改CPU 体系结构 ARM
		修改交叉编译工具链名称
		vim Makefile             198行
		修改：
		ARCH ?= $(SUBARCH)                                   
		CROSS_COMPILE ?= $(CONFIG_CROSS_COMPILE:"%"=%)
		为：
		ARCH ?= arm
		CROSS_COMPILE ?= arm-none-linux-gnueabi-
	5) 导入默认配置 (exynos_deconfig 是一个配置文件 )
		make exynos_defconfig
		实际: cp arch/arm/configs/exynos_defconfig .config
	6) 配置内核
		make menuconfig
	7) 编译内核
		make uImage
	8) 需要mkimage工具
		sudo cp ~/mkimage /bin
		sudo chmod +x /bin/mkimage 
	9) 重新生成一个设备树  (硬件相关的配置文件)
		cp arch/arm/boot/dts/exynos4412-origen.dts arch/arm/boot/dts/exynos4412-fs4412.dts
	10) 修改设备树相关Makefile
		vim arch/arm/boot/dts/Makefile	
		在
		exynos4412-origen.dtb \
		下添加如下内容
		exynos4412-fs4412.dtb \
	11) 编译设备树
		make dtbs
	12) 重新下载新的 uImage  和 exynos4412-fs4412.dtb ， 验证新的内核是否好用
		ifconfig eth0 192.168.3.110 出错，说明是的内核 (因为网卡还没移植)  
		
6   网卡驱动移植
	1) linux内核中已经有 网卡驱动 和 网络协议栈, 我们只需配置即可	
	网卡驱动  D:\linux-3.14-OK.bak\drivers\net\ethernet\davicom\dm9000.c
	网络协议栈   D:\linux-3.14-OK.bak\net\ipv4\

	2) 配置网卡
		make menuconfig
******************************************************************************************
******************************************************************************************
串口调试linux系统
ctrl+"A~Z"对应十进制数字1~26，发送时切换至发送16进制模式，然后发送对应数字
比如要发送ctrl+c，则切换16进制发送03，发送ctrl+z，则是发送1A
******************************************************************************************
******************************************************************************************
EC-Master 使用

1. 系统适配
编译模块并添加到内核中
cd Sources/atemsys
make modules
sudo insmod Sources/atemsys/atemsys.ko
如果是在目标机上使用EC-Master，则需要交叉编译
export ARCH=<…>
export CROSS_COMPILE=<…>
cd Sources/atemsys
make modules KERNELDIR=<path to target kernel dir>

******************************************************************************************
******************************************************************************************‘
EcMasterDemo
------------------------------------------------------------------------------------------
main函数分解

第一步是按照操作系统进行初始化
/* OS specific initialization */
//linux + 实施补丁（后面就只用linux代替了）
    dwRes = EnableRealtimeEnvironment();
    if (EC_E_NOERROR != dwRes)
    {
        goto Exit;
    }
    {
        sigset_t SigSet;
        int nSigNum = SIGALRM;
        sigemptyset(&SigSet);
        sigaddset(&SigSet, nSigNum);
        sigprocmask(SIG_BLOCK, &SigSet, NULL);
        signal(SIGINT, SignalHandler);
        signal(SIGTERM, SignalHandler);
    }
首先使能实时环境
然后安装SIGALRM信号
这一步的意思就是将实时环境搞好，安装信号是为了后面实时操作做准备

/* add hook to log all EtherCAT messages. Without hook no messages will be generated! */
    OsAddDbgMsgHook(CAtEmLogging::OsDbgMsgHookWrapper);

/* Initialize Timing Event descriptor */
    TimingDesc.bShutdown          = EC_FALSE;
    TimingDesc.bIsRunning         = EC_FALSE;
    TimingDesc.dwBusCycleTimeUsec = CYCLE_TIME * 1000;

/* prepare command line */
处理执行程序时附带的一些指令，诸如-f -v......

/* initialize master logging */
处理日志的程序

/* determine master configuration type */
按照命令行的解析结果配置主站
    if ('\0' != szENIFilename[0])
    {
        eCnfType     = eCnfType_Filename;
        pbyCnfData   = (EC_T_BYTE*)&szENIFilename[0];
        dwCnfDataLen = 256;
    }
    else
    {
#if (defined STATIC_MASTERENI_XML_DATA)
        eCnfType     = eCnfType_Data;
        pbyCnfData   = STATIC_MASTERENI_XML_DATA;
        dwCnfDataLen = STATIC_MASTERENI_XML_DATA_SIZE;
#else
        eCnfType     = eCnfType_GenPreopENI;
#endif
    }
加载eni文件，eni文件就是使用EC-Engineer扫描系统的ethercat后，根据拓扑结构和从站信息生成的配置文件
EC-Master使用这个文件对主站继续配置

/* for multi core cpus: select cpu number for this thread */
    EC_CPUSET_ZERO( CpuSet );
    EC_CPUSET_SET( CpuSet, dwCpuIndex );
    if( ! OsSetThreadAffinity(EC_NULL, CpuSet) )
    {
       OsDbgMsg("ERROR: Set Affinity Failed!\n");
    }

/* create timing event to trigger the job task */
    TimingDesc.pvTimingEvent = OsCreateEvent();
    if( EC_NULL == TimingDesc.pvTimingEvent )
    {
        OsDbgMsg("ERROR: insufficient memory to create timing event!\n");
        goto Exit;
    }

/* initialize auxiliary clock */

/* create timing task if needed */

执行demo函数
之后检测demo函数执行结果

/* stop timing task if running */

/* clean up auxclk */

/* delete the timing event */

/* final OS layer cleanup */

总结
最开始是声明之后要用的各种变量
然后是检测系统是否具备实时操作的条件 EnableRealtimeEnvironment()
------------------------------------------------------------------------------------------
ATEMDemo函数分解

在main函数中的调用
dwRes = ATEMDemo( &oLogging,
                      eCnfType, pbyCnfData, dwCnfDataLen,
                      TimingDesc.dwBusCycleTimeUsec, nVerbose, dwDuration,
                      apLinkParms[0],
                      TimingDesc.pvTimingEvent, dwCpuIndex,
                      bEnaPerfJobs
#if (defined ATEMRAS_SERVER)
                      ,wServerPort
#endif
                      ,((2 == dwNumLinkLayer)?apLinkParms[1]:EC_NULL)
                    );

    /******************************************************/
    /* Demo code: Remove/change this in your application  */
    /* Initialize application                             */
    /******************************************************/
代码中有这个注释，意思就是，整个demo的其他部分是通用的，即使是自己编写程序也是需要的，那么最好就是直接复制工程，只修改这一部分
demo中有多个地方有这个注释，这几部分之间夹了一些操作，具体如下
    dwRes = myAppInit(poLog, nVerbose)； //应用初始化
/* Start RAS server if enabled */ 可没有
/* Initialize EtherCAT master */
/* Create cyclic process data Thread */ 程序在这一步开线程执行tEcJobTask()
{
        S_pvtJobThread = OsCreateThread((EC_T_CHAR*)"tEcJobTask", tEcJobTask,
                                        dwBusCycleTimeUsec,
                                        JOBS_THREAD_STACKSIZE, (EC_T_VOID*)&S_DemoThreadParam);
}
/* Configure master */
/* Register client */
/* Print found slaves */
/* Print MAC address */
/* Start EtherCAT bus --> set Master state to OPERATIONAL if ENI file provided */
    dwRes = myAppPrepare(poLog, nVerbose); //应用的准备工作
/* set master and bus state to PREOP */
/* skip this step if demo started without ENI */这里有个注释是如果不使用eni文件的话就不用管这里，但一般都是需要的
{
    dwRes = myAppSetup(poLog, nVerbose, S_dwClntId); //应用配置
    /* set master and bus state to SAFEOP */
    /* set master and bus state to OP */
}
/* Enabling mode switch warnings for shadowed task */
/* run the demo */
    myAppDiagnosis(poLog, nVerbose); //Do some diagnosis job here outside the job task 诊断用的
后面就是标签Exit:了，前面的程序一旦出错就会跳转到这里
/* Stop EtherCAT bus --> Set Master state to INIT */
/* Unregister client */
/* Shutdown tEcJobTask */
/* Deinitialize master */
这里查了一下Deinitialize这个单词的意思，是没有翻译的，有个论坛是这样解释的
To release any resources that were allocated to (some object or process) as part of initialization.
/* Stop RAS server */ 可没有

从前面可以看出需要我们自己写的函数有这么几个
tEcJobTask    //处理ethercat收发数据的程序

myAppInit
myAppWorkpd 在tEcJobTask中调用
myAppPrepare
myAppSetup

tEcJobTask   工作函数
函数一开始是配置CPU
然后是一个do while语句
do while中先是设置循环的周期，之后处理接收到的数据帧（读新的输入数据），这里会检测周期是否设置正确
然后是一段可以自定义的代码，可以使用ecatGetProcessImageInputPtr和ecatGetProcessImageOutputPtr得到输入和输出数据帧的存储地址
通过输入帧来修改输出帧
接下来是这段代码
        PERF_JOB_START(PERF_myAppWorkpd);
        myAppWorkpd(pDemoThreadParam->pLogInst, pDemoThreadParam->pNotInst->Verbose(), ecatGetProcessImageInputPtr(), ecatGetProcessImageOutputPtr());
        PERF_JOB_END(PERF_myAppWorkpd);
这段代码执行myAppWorkpd，在这里有个问题，就是PERF_JOB_START和PERF_JOB_END使用的是PERF_myAppWorkpd，这个宏的值是5，那么5对应的是myAppWorkpd，
这个5还在什么地方用了呢？在这里
static EC_T_CHAR*          S_aszMeasInfo[MAX_JOB_NUM] =
{
    (EC_T_CHAR*)"JOB_ProcessAllRxFrames",
    (EC_T_CHAR*)"JOB_SendAllCycFrames  ",
    (EC_T_CHAR*)"JOB_MasterTimer       ",
    (EC_T_CHAR*)"JOB_SendAcycFrames    ",
    (EC_T_CHAR*)"Cycle Time            ",
    (EC_T_CHAR*)"myAppWorkPd           "
};
S_aszMeasInfo只有PERF_MEASURE_JOBS_SHOW()这个宏使用了，这个宏的作用是显示所有的测量信息
#define PERF_MEASURE_JOBS_SHOW()        ecatPerfMeasShow(&S_TscMeasDesc,0xFFFFFFFF,S_aszMeasInfo)
其中S_TscMeasDesc根据名称猜测是存储了所有的测量数据，那么为什么呢？答案在这个宏里
#define PERF_MEASURE_JOBS_INIT(msgcb)   ecatPerfMeasInit(&S_TscMeasDesc,0,MAX_JOB_NUM,msgcb);ecatPerfMeasEnable(&S_TscMeasDesc)
初始化测量job的时候将其地址作为参数传进去，所以每次测量的时候得到的数据都会存储到S_TscMeasDesc中，输出的时候根据S_aszMeasInfo的描述信息输出测量数据
回到do while，执行myAppWorkpd后就是发送数据帧，在之后执行用户程序eUsrJob_MasterTimer，最后发送排队的非循环数据帧


******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************