#####################################################################
#####################################################################
matplotlib
---------------------------------------------------------------------------------------------------
plt.rcParams['font.sans-serif'] = 'SimHei' # 使图形中的中文正常编码显示
plt.rcParams['axes.unicode_minus'] = False # 使坐标轴刻度表签正常显示正负号
plt.scatter() # 散点图
plt.scatter(range(df['Label'].shape[0]),np.sort(df['Label'].values))  # 散点图示例
plt.hist() # 直方图
plt.hist(rwidth=0.9,bins=100) # 直方图示例
#####################################################################
#####################################################################
pandas
---------------------------------------------------------------------------------------------------
pd.set_option('display.max_columns', None) # 显示所有列
pd.set_option('display.max_rows', None) # 显示所有行
pd.set_option('max_colwidth',100) # 设置value的显示长度为100，默认为50
DataFrame.drop(labels='xxx',axis=1,inplace=True) # 丢掉数据集中的部分数据
DataFrame.isnull() # 检测无效数据
DataFrame.sort_values() # 排序
DataFrame.to_excel("demo1.xlsx", sheet_name='Sheet1', index=False) # 保存至标签
---------------------------------------------------------------------------------------------------
# pandas使用openxl编辑excle，注意不要重复写
book = load_workbook("./data/test.xlsx")
write = pd.ExcelWriter(r"./data/test.xlsx", engine='openpyxl')
write.book = book
write.sheets = {ws.title: ws for ws in book.worksheets}
data.to_excel(write, sheet_name='WireList', header=True, index=False, startrow=0, startcol=0)
# write.save()
write.close()
font_title = Font(name="Times New Roman", bold=True, italic=False, size=13) # 字体设置
---------------------------------------------------------------------------------------------------
#####################################################################
#####################################################################
sns
---------------------------------------------------------------------------------------------------
sns.heatmap() # 热力图
# 热力图示例
plt.figure(figsize=(20, 10))
sns.heatmap(corr,square = True, annot=True, fmt='0.2f',vmax=0.8)
sns.regplot() # 数据和线性回归模型拟合
sns.boxplot() # 箱型图
#####################################################################
#####################################################################
段落实例化库
textwrap
#####################################################################
#####################################################################
import subprocess
创建子线程并执行指令，使用shell
p_uart = subprocess.Popen("make sim >> ./log/sim_uart.log", shell=True)

杀死子线程，但是执行vcs的仿真时会发现有进程没有被杀死
p_uart.kill()

使用subprocess.Popen.send_signal()与signal模块配合使用可以向子线程发送信号来控制
SIGINT     终止进程     中断进程，不可通过signal.signal()捕捉(相当于Ctrl+C)
SIGTERM    终止进程     软件终止信号，可通过signal.signal()捕捉(默认信号，当os.kill()没有指明信号类型时，默认的是该信号)
SIGKILL    终止进程     杀死进程，不可捕捉(相当于linux下的kill命令，windows下使用会抛出异常)
SIGALRM    闹钟信号     可以通过signal.alarm()和os.kill()发送该信号，可通过signal.signal()捕捉
SIGQUIT    退出进程     和SIGTERM类似，可通过signal.signal()捕捉

但是在使用中还是有些进程没有杀死，烦的一批，如果明确知道有哪些进程未杀死，可直接用kill或pkill，推荐用pkill，因为程序名字往往是固定的，此时就不需要用signal了
os.system("pkill asic")
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################
#####################################################################