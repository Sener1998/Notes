******************************************************************************************
******************************************************************************************
官方例子在https://orocos.org/kdl/examples.html
******************************************************************************************
******************************************************************************************
基础组件的功能解释和使用方法
关节空间->笛卡尔空间
Segment s1 = Segment(Joint(Joint::RotZ),
                    Frame(Rotation::Identity() ,Vector(2.0,0.0,0.0)));
Segment s2 = Segment(Joint(Joint::RotZ),
                    Frame(Rotation::Identity() ,Vector(4.0,0.0,0.0)));
Chain chain1;
chain1.addSegment(s1);
chain1.addSegment(s2);
unsigned int nj = chain1.getNrOfJoints();
unsigned int js = chain1.getNrOfSegments();
JntArray q(nj);
q.data << 0.0, M_PI/2;
ChainFkSolverPos_recursive fksolver(chain1);
Frame F_result;
fksolver.JntToCart(q,F_result);
Frame f(F_result);

首先创建两个连杆segment1、segment2，创建初始则有了一个连杆的起点frame_ref，同时指定关节和连杆末端
对于关节，则指定旋转轴或平移轴或压根不要关节，可以设置关节frame和frame_ref的偏移，但不可设置关节frame和frame_ref的相对旋转
Joint rx = Joint(Joint::RotX);    //Rotational Joint about X
Joint ry = Joint(Joint::RotY);    //Rotational Joint about Y
Joint rz = Joint(Joint::RotZ);    //Rotational Joint about Z
Joint tx = Joint(Joint::TransX);  //Translational Joint along X
Joint ty = Joint(Joint::TransY);  //Translational Joint along Y
Joint tz = Joint(Joint::TransZ);  //Translational Joint along Z
Joint fixed = Joint(Joint::None); //Rigid Connection

对于连杆末端，两个目的，一个是连杆上所的某个位置，因为设置旋转角度后能够直接得到旋转后的连杆末端frame相对于frame_ref的相对位置和姿态
另一个是创建chain的时候后是将新segment的frame_ref装在前一个segment的连杆末端
Frame f1;                            //Creates Identity frame
Frame f1=Frame::Identity();          //Creates an identity frame: Rotation::Identity() and Vector::Zero()
Frame f2(your_rotation);             //Create a frame with your_rotation and a zero vector
Frame f3(your_vector);               //Create a frame with your_vector and a identity rotation
Frame f4(your_rotation,your_vector); //Create a frame with your_rotation
Frame f5(your_vector,your_rotation); //and your_vector
Frame f5(f6);                        //the copy constructor
Rotation r1;                                        //The default constructor, initializes to an 3x3 identity matrix
Rotation r1 = Rotation::Identity();                 //Identity Rotation = zero rotation
Rotation r2 = Rotation::RPY(roll,pitch,yaw);        //Rotation built from Roll-Pitch-Yaw angles
Rotation r3 = Rotation::EulerZYZ(alpha,beta,gamma); //Rotation built from Euler Z-Y-Z angles
Rotation r4 = Rotation::EulerZYX(alpha,beta,gamma); //Rotation built from Euler Z-Y-X angles
Rotation r5 = Rotation::Rot(vector,angle);          //Rotation built from an equivalent axis(vector) and an angle.
Vector v1;                  //The default constructor, X-Y-Z are initialized to zero
Vector v2(x,y,z);           //X-Y-Z are initialized with the given values
Vector v3(v2);              //The copy constructor
Vector v4 = Vector::Zero(); //All values are set to zero

之后创建chain，将两个segment添加进去
随后创建一个关节数列JntArray，其属性data的类型是Eigen::VectorXd，通过运算或直接赋值改变其data向量
创建一个求解器，这里是链的正运动学位置求解器ChainFkSolverPos_recursive，调用JntToCart
virtual int JntToCart(const JntArray& q_in, Frame& p_out, int segmentNr=-1);
virtual int JntToCart(const JntArray& q_in, std::vector<Frame>& p_out, int segmentNr=-1);
我对segmentNr的理解是计算到第几个连杆末端，-1就是直接干到最底层，否则就是指定数量的连杆，得到的最末端的连杆末端相对第一个连杆的frame_ref的姿态矩阵赋给p_out
******************************************************************************************
******************************************************************************************
Forward kinematic chain example
Submitted by fcauwe on Thu, 2007-11-29 11:21.

// Copyright  (C)  2007  Francois Cauwe <francois at cauwe dot org>

// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.

#include <kdl/chain.hpp>
#include <kdl/chainfksolver.hpp>
#include <kdl/chainfksolverpos_recursive.hpp>
#include <kdl/frames_io.hpp>
#include <stdio.h>
#include <iostream>

using namespace KDL;


int main( int argc, char** argv )
{
    //Definition of a kinematic chain & add segments to the chain
    KDL::Chain chain;
    chain.addSegment(Segment(Joint(Joint::RotZ),Frame(Vector(0.0,0.0,1.020))));
    chain.addSegment(Segment(Joint(Joint::RotX),Frame(Vector(0.0,0.0,0.480))));
    chain.addSegment(Segment(Joint(Joint::RotX),Frame(Vector(0.0,0.0,0.645))));
    chain.addSegment(Segment(Joint(Joint::RotZ)));
    chain.addSegment(Segment(Joint(Joint::RotX),Frame(Vector(0.0,0.0,0.120))));
    chain.addSegment(Segment(Joint(Joint::RotZ)));

    // Create solver based on kinematic chain
    ChainFkSolverPos_recursive fksolver = ChainFkSolverPos_recursive(chain);

    // Create joint array
    unsigned int nj = chain.getNrOfJoints();
    KDL::JntArray jointpositions = JntArray(nj);

    // Assign some values to the joint positions
    for(unsigned int i=0;i<nj;i++){
        float myinput;
        printf ("Enter the position of joint %i: ",i);
        scanf ("%e",&myinput);
        jointpositions(i)=(double)myinput;
    }

    // Create the frame that will contain the results
    KDL::Frame cartpos;

    // Calculate forward position kinematics
    bool kinematics_status;
    kinematics_status = fksolver.JntToCart(jointpositions,cartpos);
    if(kinematics_status>=0){
        std::cout << cartpos <<std::endl;
        printf("%s \n","Succes, thanks KDL!");
    }else{
        printf("%s \n","Error: could not calculate forward kinematics :(");
    }
}
******************************************************************************************
******************************************************************************************
//Creation of the chain:
KDL::Chain chain;
chain.addSegment(Segment(Joint(Joint::RotZ),Frame(Vector(0.0,0.0,1.020))));
chain.addSegment(Segment(Joint(Joint::RotX),Frame(Vector(0.0,0.0,0.480))));
chain.addSegment(Segment(Joint(Joint::RotX),Frame(Vector(0.0,0.0,0.645))));
chain.addSegment(Segment(Joint(Joint::RotZ)));
chain.addSegment(Segment(Joint(Joint::RotX),Frame(Vector(0.0,0.0,0.120))));
chain.addSegment(Segment(Joint(Joint::RotZ)));

//Creation of the solvers:
ChainFkSolverPos_recursive fksolver1(chain1);//Forward position solver
ChainIkSolverVel_pinv iksolver1v(chain1);//Inverse velocity solver
ChainIkSolverPos_NR iksolver1p(chain1,fksolver1,iksolver1v,100,1e-6);//Maximum 100 iterations, stop at accuracy 1e-6

//Creation of jntarrays:
JntArray q(chain.getNrOfJoints());
JntArray q_init(chain.getNrOfJoints());

//Set destination frame
Frame F_dest=...;

int ret = iksolver1p.CartToJnt(q_init,F_dest,q); //由于是迭代求解，所以初值越准确迭代的速度越快最后的结果越准确
******************************************************************************************
******************************************************************************************
Eigen3 知识补充
------------------------------------------------------------------------------------------
Eigen 矩阵定义
#include <Eigen/Dense>

Matrix<double, 3, 3> A;               // Fixed rows and cols. Same as Matrix3d.
Matrix<double, 3, Dynamic> B;         // Fixed rows, dynamic cols.
Matrix<double, Dynamic, Dynamic> C;   // Full dynamic. Same as MatrixXd.
Matrix<double, 3, 3, RowMajor> E;     // Row major; default is column-major.
Matrix3f P, Q, R;                     // 3x3 float matrix.
Vector3f x, y, z;                     // 3x1 float matrix.
RowVector3f a, b, c;                  // 1x3 float matrix.
VectorXd v;                           // Dynamic column vector of doubles
// Eigen          // Matlab           // comments
x.size()          // length(x)        // vector size
C.rows()          // size(C,1)        // number of rows
C.cols()          // size(C,2)        // number of columns
x(i)              // x(i+1)           // Matlab is 1-based
C(i,j)            // C(i+1,j+1)       //
------------------------------------------------------------------------------------------
 Eigen 基础使用
// Basic usage
// Eigen        // Matlab           // comments
x.size()        // length(x)        // vector size
C.rows()        // size(C,1)        // number of rows
C.cols()        // size(C,2)        // number of columns
x(i)            // x(i+1)           // Matlab is 1-based
C(i, j)         // C(i+1,j+1)       //

A.resize(4, 4);   // Runtime error if assertions are on.
B.resize(4, 9);   // Runtime error if assertions are on.
A.resize(3, 3);   // Ok; size didn't change.
B.resize(3, 9);   // Ok; only dynamic cols changed.

A << 1, 2, 3,     // Initialize A. The elements can also be
     4, 5, 6,     // matrices, which are stacked along cols
     7, 8, 9;     // and then the rows are stacked.
B << A, A, A;     // B is three horizontally stacked A's.
A.fill(10);       // Fill A with all 10's.
------------------------------------------------------------------------------------------
Eigen 特殊矩阵生成
// Eigen                            // Matlab
MatrixXd::Identity(rows,cols)       // eye(rows,cols)
C.setIdentity(rows,cols)            // C = eye(rows,cols)
MatrixXd::Zero(rows,cols)           // zeros(rows,cols)
C.setZero(rows,cols)                // C = ones(rows,cols)
MatrixXd::Ones(rows,cols)           // ones(rows,cols)
C.setOnes(rows,cols)                // C = ones(rows,cols)
MatrixXd::Random(rows,cols)         // rand(rows,cols)*2-1        // MatrixXd::Random returns uniform random numbers in (-1, 1).
C.setRandom(rows,cols)              // C = rand(rows,cols)*2-1
VectorXd::LinSpaced(size,low,high)  // linspace(low,high,size)'
v.setLinSpaced(size,low,high)       // v = linspace(low,high,size)'
------------------------------------------------------------------------------------------
Eigen 矩阵分块
// Matrix slicing and blocks. All expressions listed here are read/write.
// Templated size versions are faster. Note that Matlab is 1-based (a size N
// vector is x(1)...x(N)).
// Eigen                           // Matlab
x.head(n)                          // x(1:n)
x.head<n>()                        // x(1:n)
x.tail(n)                          // x(end - n + 1: end)
x.tail<n>()                        // x(end - n + 1: end)
x.segment(i, n)                    // x(i+1 : i+n)
x.segment<n>(i)                    // x(i+1 : i+n)
P.block(i, j, rows, cols)          // P(i+1 : i+rows, j+1 : j+cols)
P.block<rows, cols>(i, j)          // P(i+1 : i+rows, j+1 : j+cols)
P.row(i)                           // P(i+1, :)
P.col(j)                           // P(:, j+1)
P.leftCols<cols>()                 // P(:, 1:cols)
P.leftCols(cols)                   // P(:, 1:cols)
P.middleCols<cols>(j)              // P(:, j+1:j+cols)
P.middleCols(j, cols)              // P(:, j+1:j+cols)
P.rightCols<cols>()                // P(:, end-cols+1:end)
P.rightCols(cols)                  // P(:, end-cols+1:end)
P.topRows<rows>()                  // P(1:rows, :)
P.topRows(rows)                    // P(1:rows, :)
P.middleRows<rows>(i)              // P(i+1:i+rows, :)
P.middleRows(i, rows)              // P(i+1:i+rows, :)
P.bottomRows<rows>()               // P(end-rows+1:end, :)
P.bottomRows(rows)                 // P(end-rows+1:end, :)
P.topLeftCorner(rows, cols)        // P(1:rows, 1:cols)
P.topRightCorner(rows, cols)       // P(1:rows, end-cols+1:end)
P.bottomLeftCorner(rows, cols)     // P(end-rows+1:end, 1:cols)
P.bottomRightCorner(rows, cols)    // P(end-rows+1:end, end-cols+1:end)
P.topLeftCorner<rows,cols>()       // P(1:rows, 1:cols)
P.topRightCorner<rows,cols>()      // P(1:rows, end-cols+1:end)
P.bottomLeftCorner<rows,cols>()    // P(end-rows+1:end, 1:cols)
P.bottomRightCorner<rows,cols>()   // P(end-rows+1:end, end-cols+1:end)
------------------------------------------------------------------------------------------
Eigen 矩阵元素交换
// Of particular note is Eigen's swap function which is highly optimized.
// Eigen                           // Matlab
R.row(i) = P.col(j);               // R(i, :) = P(:, i)
R.col(j1).swap(mat1.col(j2));      // R(:, [j1 j2]) = R(:, [j2, j1])
------------------------------------------------------------------------------------------
Eigen 矩阵转置
// Views, transpose, etc; all read-write except for .adjoint().
// Eigen                           // Matlab
R.adjoint()                        // R'
R.transpose()                      // R.' or conj(R')
R.diagonal()                       // diag(R)
x.asDiagonal()                     // diag(x)
R.transpose().colwise().reverse(); // rot90(R)
R.conjugate()                      // conj(R)
------------------------------------------------------------------------------------------
Eigen 矩阵乘积
// All the same as Matlab, but matlab doesn't have *= style operators.
// Matrix-vector.  Matrix-matrix.   Matrix-scalar.
y  = M*x;          R  = P*Q;        R  = P*s;
a  = b*M;          R  = P - Q;      R  = s*P;
a *= M;            R  = P + Q;      R  = P/s;
                   R *= Q;          R  = s*P;
                   R += Q;          R *= s;
                   R -= Q;          R /= s;
------------------------------------------------------------------------------------------
Eigen 矩阵单个元素操作
// Vectorized operations on each element independently
// Eigen                  // Matlab
R = P.cwiseProduct(Q);    // R = P .* Q
R = P.array() * s.array();// R = P .* s
R = P.cwiseQuotient(Q);   // R = P ./ Q
R = P.array() / Q.array();// R = P ./ Q
R = P.array() + s.array();// R = P + s
R = P.array() - s.array();// R = P - s
R.array() += s;           // R = R + s
R.array() -= s;           // R = R - s
R.array() < Q.array();    // R < Q
R.array() <= Q.array();   // R <= Q
R.cwiseInverse();         // 1 ./ P
R.array().inverse();      // 1 ./ P
R.array().sin()           // sin(P)
R.array().cos()           // cos(P)
R.array().pow(s)          // P .^ s
R.array().square()        // P .^ 2
R.array().cube()          // P .^ 3
R.cwiseSqrt()             // sqrt(P)
R.array().sqrt()          // sqrt(P)
R.array().exp()           // exp(P)
R.array().log()           // log(P)
R.cwiseMax(P)             // max(R, P)
R.array().max(P.array())  // max(R, P)
R.cwiseMin(P)             // min(R, P)
R.array().min(P.array())  // min(R, P)
R.cwiseAbs()              // abs(P)
R.array().abs()           // abs(P)
R.cwiseAbs2()             // abs(P.^2)
R.array().abs2()          // abs(P.^2)
(R.array() < s).select(P,Q);  // (R < s ? P : Q)
------------------------------------------------------------------------------------------
Eigen 矩阵化简
// Reductions.
int r, c;
// Eigen                  // Matlab
R.minCoeff()              // min(R(:))
R.maxCoeff()              // max(R(:))
s = R.minCoeff(&r, &c)    // [s, i] = min(R(:)); [r, c] = ind2sub(size(R), i);
s = R.maxCoeff(&r, &c)    // [s, i] = max(R(:)); [r, c] = ind2sub(size(R), i);
R.sum()                   // sum(R(:))
R.colwise().sum()         // sum(R)
R.rowwise().sum()         // sum(R, 2) or sum(R')'
R.prod()                  // prod(R(:))
R.colwise().prod()        // prod(R)
R.rowwise().prod()        // prod(R, 2) or prod(R')'
R.trace()                 // trace(R)
R.all()                   // all(R(:))
R.colwise().all()         // all(R)
R.rowwise().all()         // all(R, 2)
R.any()                   // any(R(:))
R.colwise().any()         // any(R)
R.rowwise().any()         // any(R, 2)
------------------------------------------------------------------------------------------
Eigen 矩阵点乘
// Dot products, norms, etc.
// Eigen                  // Matlab
x.norm()                  // norm(x).    Note that norm(R) doesn't work in Eigen.
x.squaredNorm()           // dot(x, x)   Note the equivalence is not true for complex
x.dot(y)                  // dot(x, y)
x.cross(y)                // cross(x, y) Requires #include <Eigen/Geometry>

Eigen 矩阵类型转换
//// Type conversion
// Eigen                           // Matlab
A.cast<double>();                  // double(A)
A.cast<float>();                   // single(A)
A.cast<int>();                     // int32(A)
A.real();                          // real(A)
A.imag();                          // imag(A)
// if the original type equals destination type, no work is done
------------------------------------------------------------------------------------------
Eigen 求解线性方程组 Ax = b
// Solve Ax = b. Result stored in x. Matlab: x = A \ b.
x = A.ldlt().solve(b));  // A sym. p.s.d.    #include <Eigen/Cholesky>
x = A.llt() .solve(b));  // A sym. p.d.      #include <Eigen/Cholesky>
x = A.lu()  .solve(b));  // Stable and fast. #include <Eigen/LU>
x = A.qr()  .solve(b));  // No pivoting.     #include <Eigen/QR>
x = A.svd() .solve(b));  // Stable, slowest. #include <Eigen/SVD>
// .ldlt() -> .matrixL() and .matrixD()
// .llt()  -> .matrixL()
// .lu()   -> .matrixL() and .matrixU()
// .qr()   -> .matrixQ() and .matrixR()
// .svd()  -> .matrixU(), .singularValues(), and .matrixV()
------------------------------------------------------------------------------------------
Eigen 矩阵特征值
// Eigenvalue problems
// Eigen                          // Matlab
A.eigenvalues();                  // eig(A);
EigenSolver<Matrix3d> eig(A);     // [vec val] = eig(A)
eig.eigenvalues();                // diag(val)
eig.eigenvectors();               // vec
// For self-adjoint matrices use SelfAdjointEigenSolver<>
******************************************************************************************
******************************************************************************************
KDL::Trajectory_composite

其中vt是一系列轨迹点的向量，轨迹点Trajectory里面记录了一个笛卡尔空间中的点的位置(Pos)、速度(Vel)、加速度(Acc)
最有意思的是duration，在往Trajectory_Composite中添加Trajectory时，会将该笛卡尔空间中的点在总轨迹上的时间设置为原总轨迹的总时间加上duration
也就是duration描述的是在duration时间后到达该点(Pos, Vel, Acc)
在通过Pos(time)、Vel(time)、Acc(time)函数获取轨迹点的时候，当所输入的时间在轨迹中的某两个时间点之间，则返回小于输入时间的那个时间的轨迹点信息，其他情况则返回0时间或最后一个时间的轨迹点信息
看代码的时候发现vd添加第一个点的时候，vd插入了其duration，可见第一个时间点的duration应该设置为0

namespace KDL {
class Trajectory_Composite: public Trajectory
        {
                typedef std::vector<Trajectory*> VectorTraj;
                typedef std::vector<double>         VectorDouble;
                VectorTraj vt;      // contains the element Trajectories
                VectorDouble  vd;      // contains end time for each Trajectory
                double duration;    // total duration of the composed
                                    // Trajectory

        public:
                Trajectory_Composite();
                // Constructs an empty composite

                virtual double Duration() const;
                virtual Frame Pos(double time) const;
                virtual Twist Vel(double time) const;
                virtual Twist Acc(double time) const;

                virtual void Add(Trajectory* elem);
                // Adds trajectory <elem> to the end of the sequence.

                virtual void Destroy();
                virtual void Write(std::ostream& os) const;
                virtual Trajectory* Clone() const;

                virtual ~Trajectory_Composite();
        };
}

******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************
******************************************************************************************